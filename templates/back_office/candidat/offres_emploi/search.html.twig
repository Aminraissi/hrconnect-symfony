<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recherche d'offres d'emploi</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <style>
        body {
            padding: 20px;
            background-color: #f8f9fa;
        }
        .search-container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .search-box {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        .loader {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
        .highlight {
            background-color: #fff3cd;
            padding: 2px;
            border-radius: 3px;
            font-weight: bold;
        }
        .btn-view, .btn-apply {
            margin-right: 5px;
        }
        .sort-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .sort-controls select {
            min-width: 150px;
        }
        .sort-controls button {
            white-space: nowrap;
        }
    </style>
</head>
<body>
    <div class="search-container">
        <h1 class="mb-4">Recherche d'offres d'emploi</h1>

        <!-- Formulaire de recherche et options de tri -->
        <div class="search-box">
            <form id="search-form">
                <div class="form-group">
                    <label for="search-input">Rechercher par titre :</label>
                    <input type="text" id="search-input" class="form-control" placeholder="Entrez un terme de recherche...">
                </div>

                <div class="form-group mt-3">
                    <label>Trier par :</label>
                    <div class="sort-controls">
                        <select id="sort-field" class="form-control">
                            <option value="title">Titre</option>
                            <option value="location">Localisation</option>
                        </select>
                        <select id="sort-order" class="form-control">
                            <option value="asc">Ordre croissant</option>
                            <option value="desc">Ordre décroissant</option>
                        </select>
                        <button type="button" id="apply-sort" class="btn btn-primary">Appliquer le tri</button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Indicateur de chargement -->
        <div id="loader" class="loader">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Chargement...</span>
            </div>
            <p>Recherche en cours...</p>
        </div>

        <!-- Compteur de résultats -->
        <div class="mb-3">
            <span id="result-count">{{ offres|length }} offres</span>
        </div>

        <!-- Tableau des résultats -->
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Titre</th>
                        <th>Localisation</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="results-container">
                    {% for offre in offres %}
                        <tr>
                            <td>{{ offre.title }}</td>
                            <td>{{ offre.location }}</td>
                            <td>
                                <a href="{{ path('back.candidat.offres_emploi.show', {'id': offre.id}) }}" class="btn btn-info btn-sm">
                                    Voir détail
                                </a>
                                <a href="{{ path('app_candidat_candidature_new', {'id': offre.id}) }}" class="btn btn-success btn-sm">
                                    Postuler
                                </a>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="3" class="text-center">Aucune offre disponible</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Lien de retour -->
        <div class="mt-4">
            <a href="{{ path('back.candidat.offres_emploi.index') }}" class="btn btn-secondary">
                Retour à la liste complète
            </a>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Éléments du DOM
            const searchInput = document.getElementById('search-input');
            const searchForm = document.getElementById('search-form');
            const resultsContainer = document.getElementById('results-container');
            const resultCount = document.getElementById('result-count');
            const loader = document.getElementById('loader');
            const sortField = document.getElementById('sort-field');
            const sortOrder = document.getElementById('sort-order');
            const applySort = document.getElementById('apply-sort');

            // Variables pour stocker les paramètres de recherche et de tri
            let searchTimeout;
            let currentSortField = 'title';
            let currentSortOrder = 'asc';

            // Fonction de recherche
            async function performSearch() {
                // Afficher le loader
                loader.style.display = 'block';

                // Récupérer le terme de recherche
                const searchTerm = searchInput.value.trim();
                console.log('Recherche de:', searchTerm);

                try {
                    // Construire l'URL avec le terme de recherche et les paramètres de tri
                    const url = '{{ path("back.candidat.offres_emploi.advanced_search") }}?title=' + encodeURIComponent(searchTerm) +
                        '&sort=' + encodeURIComponent(currentSortField) +
                        '&order=' + encodeURIComponent(currentSortOrder);

                    // Effectuer la requête fetch
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    // Vérifier si la réponse est OK
                    if (!response.ok) {
                        throw new Error('Erreur HTTP: ' + response.status);
                    }

                    // Récupérer le contenu HTML
                    const html = await response.text();

                    // Mettre à jour le conteneur de résultats
                    resultsContainer.innerHTML = html;

                    // Compter les résultats
                    const rowCount = resultsContainer.querySelectorAll('tr').length;
                    const count = rowCount > 0 ? rowCount : 0;

                    // Mettre à jour le compteur
                    resultCount.textContent = count + ' offre(s) trouvée(s)' +
                        (searchTerm ? ' pour "' + searchTerm + '"' : '');

                    console.log('Recherche terminée avec succès');
                } catch (error) {
                    console.error('Erreur lors de la recherche:', error);
                    resultsContainer.innerHTML = '<tr><td colspan="3" class="text-center text-danger">Erreur lors de la recherche</td></tr>';
                } finally {
                    // Masquer le loader
                    loader.style.display = 'none';
                }
            }

            // Gestionnaire d'événement pour la saisie
            searchInput.addEventListener('input', function() {
                // Annuler le timeout précédent
                clearTimeout(searchTimeout);

                // Définir un nouveau timeout
                searchTimeout = setTimeout(performSearch, 300);
            });

            // Gestionnaire d'événement pour le formulaire
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                performSearch();
            });

            // Gestionnaire d'événement pour le bouton de tri
            applySort.addEventListener('click', function() {
                // Mettre à jour les paramètres de tri
                currentSortField = sortField.value;
                currentSortOrder = sortOrder.value;
                console.log('Tri appliqué:', currentSortField, currentSortOrder);

                // Effectuer une nouvelle recherche avec les nouveaux paramètres de tri
                performSearch();
            });

            // Recherche initiale
            performSearch();
        });
    </script>
</body>
</html>
